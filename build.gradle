plugins {
    id "java-library"
    id "maven-publish"
    id "signing"
    id "idea"
    id "io.freefair.lombok" version "8.11"
    id "io.codearte.nexus-staging" version "0.30.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

group "com.efindi"
version "0.0.3-RELEASE"
String pomName = getName()
String pomVersion = getVersion()
String pomGroupId = getGroup()

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dependencies {
    implementation 'org.springframework.data:spring-data-mongodb:3.4.18'
    implementation 'jakarta.validation:jakarta.validation-api:2.0.2'
    implementation 'org.apache.commons:commons-lang3:3.17.0'

    testImplementation 'ch.qos.logback:logback-core:1.3.14'
    testImplementation 'ch.qos.logback:logback-classic:1.3.14'
    testImplementation 'commons-io:commons-io:2.18.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jar {
    String[] packageArr = ["com", "efindi", "smo", "filter"]
    from("LICENSE-2.0.txt") {
        into("META-INF")
    }
    manifest {
        attributes(
                "Name": String.join("/", packageArr).concat("/"),
                "Specification-Title": "Spring MongoDB OData Filter",
                "Specification-Version": "4.01",
                "Specification-Vendor": pomGroupId,
                "Implementation-Title": String.join(".", packageArr),
                "Implementation-Version": pomVersion,
                "Implementation-Vendor": pomGroupId,
                "Created-By": System.getProperty("java.version") + " (" + System.getProperty("java.vendor") + ")",
                "Built-With": "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}"
        )
    }
}

test {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        def gitUrl = "https://github.com/efindi/smo-filter"
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
            pom {
                name = pomName
                description = "OData V4.01 \$filter for Spring Data MongoDB"
                url = gitUrl
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = getDeveloperProperty("id")
                        name = getDeveloperProperty("name")
                        email = getDeveloperProperty("email")
                    }
                }
                scm {
                    connection = "scm:git:git@github.com:efindi/smo-filter.git"
                    developerConnection = "scm:git:ssh://git@github.com:efindi/smo-filter.git"
                    url = gitUrl
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
//            def releasesRepoUrl = layout.buildDirectory.dir("/repos/releases")
//            def snapshotsRepoUrl = layout.buildDirectory.dir("/repos/snapshots")
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials) {
                username = getOssrhProperty("username")
                password = getOssrhProperty("password")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

def getOssrhProperty(String name) {
    name = String.join(".", "ossrh", name)
    if (project.hasProperty(name)) {
        return project.getProperties()[name]
    } else {
        return ""
    }
}

def getDeveloperProperty(String name) {
    name = String.join(".", "developer", name)
    if (project.hasProperty(name)) {
        return project.getProperties()[name]
    } else {
        return ""
    }
}

nexusStaging {
    username = getOssrhProperty("username")
    password = getOssrhProperty("password")
}

lombok {
    version = "1.18.20"
}